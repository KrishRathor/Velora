
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  walletAdress: 'walletAdress',
  email: 'email',
  name: 'name',
  image: 'image',
  createdAt: 'createdAt'
};

exports.Prisma.WorkflowScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  userId: 'userId',
  isPublic: 'isPublic',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkflowNodeScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  type: 'type',
  name: 'name',
  positionX: 'positionX',
  positionY: 'positionY',
  config: 'config',
  orderIndex: 'orderIndex'
};

exports.Prisma.WorkflowEdgeScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  sourceNodeId: 'sourceNodeId',
  targetNodeId: 'targetNodeId',
  label: 'label'
};

exports.Prisma.WorkflowExecutionScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  userId: 'userId',
  status: 'status',
  logs: 'logs',
  startedAt: 'startedAt',
  finishedAt: 'finishedAt'
};

exports.Prisma.WorkflowVersionScalarFieldEnum = {
  id: 'id',
  workflowId: 'workflowId',
  versionNumber: 'versionNumber',
  snapshot: 'snapshot',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.WorkflowNodeType = exports.$Enums.WorkflowNodeType = {
  Trigger: 'Trigger',
  Action: 'Action',
  Condition: 'Condition',
  Http: 'Http'
};

exports.WorkflowEdgeLabel = exports.$Enums.WorkflowEdgeLabel = {
  onSuccess: 'onSuccess',
  onFaliure: 'onFaliure'
};

exports.ExecutionStatus = exports.$Enums.ExecutionStatus = {
  PENDING: 'PENDING',
  RUNNING: 'RUNNING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Workflow: 'Workflow',
  WorkflowNode: 'WorkflowNode',
  WorkflowEdge: 'WorkflowEdge',
  WorkflowExecution: 'WorkflowExecution',
  WorkflowVersion: 'WorkflowVersion'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/krish/Desktop/code/dev/new/Velora/apps/server/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/krish/Desktop/code/dev/new/Velora/apps/server/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.17.1",
  "engineVersion": "272a37d34178c2894197e17273bf937f25acdeac",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                String              @id @default(uuid())\n  walletAdress      String              @unique\n  email             String?\n  name              String?\n  image             String?\n  createdAt         DateTime            @default(now())\n  Workflow          Workflow[]\n  WorkflowExecution WorkflowExecution[]\n}\n\nmodel Workflow {\n  id                String              @id @default(uuid())\n  name              String\n  description       String\n  userId            String\n  user              User                @relation(references: [id], fields: [userId])\n  isPublic          Boolean             @default(false)\n  isActive          Boolean             @default(true)\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  WorkflowNode      WorkflowNode[]\n  WorkflowEdge      WorkflowEdge[]\n  WorkflowExecution WorkflowExecution[]\n  WorkflowVersion   WorkflowVersion[]\n}\n\nmodel WorkflowNode {\n  id         String           @id @default(uuid())\n  workflowId String\n  workflow   Workflow         @relation(references: [id], fields: [workflowId])\n  type       WorkflowNodeType\n  name       String\n  positionX  Float\n  positionY  Float\n  config     Json\n  orderIndex Int              @default(0)\n}\n\nenum WorkflowNodeType {\n  Trigger\n  Action\n  Condition\n  Http\n  // more to be added\n}\n\nmodel WorkflowEdge {\n  id         String   @id @default(cuid())\n  workflowId String\n  workflow   Workflow @relation(fields: [workflowId], references: [id])\n\n  sourceNodeId String\n  targetNodeId String\n  label        WorkflowEdgeLabel\n}\n\nenum WorkflowEdgeLabel {\n  onSuccess\n  onFaliure\n}\n\nmodel WorkflowExecution {\n  id         String   @id @default(cuid())\n  workflowId String\n  workflow   Workflow @relation(fields: [workflowId], references: [id])\n  userId     String?\n  user       User?    @relation(fields: [userId], references: [id])\n\n  status     ExecutionStatus @default(PENDING)\n  logs       Json // Array of logs or structured events\n  startedAt  DateTime        @default(now())\n  finishedAt DateTime?\n}\n\nenum ExecutionStatus {\n  PENDING\n  RUNNING\n  SUCCESS\n  FAILED\n}\n\nmodel WorkflowVersion {\n  id         String   @id @default(cuid())\n  workflowId String\n  workflow   Workflow @relation(fields: [workflowId], references: [id])\n\n  versionNumber Int\n  snapshot      Json // Full serialized workflow: {nodes, edges, config}\n  createdAt     DateTime @default(now())\n}\n",
  "inlineSchemaHash": "d78592fca27f3654e93c073f0faf7aa08fcec6cd76a9f4c682efe510e7afa7cf",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"walletAdress\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"image\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"Workflow\",\"kind\":\"object\",\"type\":\"Workflow\",\"relationName\":\"UserToWorkflow\"},{\"name\":\"WorkflowExecution\",\"kind\":\"object\",\"type\":\"WorkflowExecution\",\"relationName\":\"UserToWorkflowExecution\"}],\"dbName\":null},\"Workflow\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkflow\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"WorkflowNode\",\"kind\":\"object\",\"type\":\"WorkflowNode\",\"relationName\":\"WorkflowToWorkflowNode\"},{\"name\":\"WorkflowEdge\",\"kind\":\"object\",\"type\":\"WorkflowEdge\",\"relationName\":\"WorkflowToWorkflowEdge\"},{\"name\":\"WorkflowExecution\",\"kind\":\"object\",\"type\":\"WorkflowExecution\",\"relationName\":\"WorkflowToWorkflowExecution\"},{\"name\":\"WorkflowVersion\",\"kind\":\"object\",\"type\":\"WorkflowVersion\",\"relationName\":\"WorkflowToWorkflowVersion\"}],\"dbName\":null},\"WorkflowNode\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflowId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflow\",\"kind\":\"object\",\"type\":\"Workflow\",\"relationName\":\"WorkflowToWorkflowNode\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"WorkflowNodeType\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"positionX\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"positionY\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"config\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"}],\"dbName\":null},\"WorkflowEdge\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflowId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflow\",\"kind\":\"object\",\"type\":\"Workflow\",\"relationName\":\"WorkflowToWorkflowEdge\"},{\"name\":\"sourceNodeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetNodeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"label\",\"kind\":\"enum\",\"type\":\"WorkflowEdgeLabel\"}],\"dbName\":null},\"WorkflowExecution\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflowId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflow\",\"kind\":\"object\",\"type\":\"Workflow\",\"relationName\":\"WorkflowToWorkflowExecution\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWorkflowExecution\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ExecutionStatus\"},{\"name\":\"logs\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"finishedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"WorkflowVersion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflowId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"workflow\",\"kind\":\"object\",\"type\":\"Workflow\",\"relationName\":\"WorkflowToWorkflowVersion\"},{\"name\":\"versionNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"snapshot\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

